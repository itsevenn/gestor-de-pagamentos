require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://vnilgkvxudsxqujvogqi.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o encontrada no ambiente');
  console.log('üí° Para configurar o Supabase:');
  console.log('1. Acesse o dashboard do Supabase');
  console.log('2. V√° em Settings > API');
  console.log('3. Copie a "service_role" key');
  console.log('4. Configure como vari√°vel de ambiente SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function setupSupabase() {
  try {
    console.log('üöÄ Configurando Supabase...');

    // Verifica se o bucket 'avatars' existe
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå Erro ao listar buckets:', bucketsError.message);
      return;
    }

    const avatarsBucket = buckets.find(bucket => bucket.name === 'avatars');
    
    if (!avatarsBucket) {
      console.log('üì¶ Criando bucket "avatars"...');
      const { data: newBucket, error: createError } = await supabase.storage.createBucket('avatars', {
        public: true,
        allowedMimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
        fileSizeLimit: 5242880 // 5MB
      });

      if (createError) {
        console.error('‚ùå Erro ao criar bucket:', createError.message);
        return;
      }

      console.log('‚úÖ Bucket "avatars" criado com sucesso!');
    } else {
      console.log('‚úÖ Bucket "avatars" j√° existe');
    }

    // Configura pol√≠tica de acesso p√∫blico para o bucket
    console.log('üîê Configurando pol√≠ticas de acesso...');
    
    // Pol√≠tica para permitir upload de usu√°rios autenticados
    const { error: uploadPolicyError } = await supabase.storage.from('avatars').createPolicy('allow_authenticated_upload', {
      name: 'allow_authenticated_upload',
      definition: {
        role: 'authenticated',
        operation: 'INSERT'
      }
    });

    if (uploadPolicyError && !uploadPolicyError.message.includes('already exists')) {
      console.error('‚ùå Erro ao criar pol√≠tica de upload:', uploadPolicyError.message);
    } else {
      console.log('‚úÖ Pol√≠tica de upload configurada');
    }

    // Pol√≠tica para permitir leitura p√∫blica
    const { error: readPolicyError } = await supabase.storage.from('avatars').createPolicy('allow_public_read', {
      name: 'allow_public_read',
      definition: {
        role: 'anon',
        operation: 'SELECT'
      }
    });

    if (readPolicyError && !readPolicyError.message.includes('already exists')) {
      console.error('‚ùå Erro ao criar pol√≠tica de leitura:', readPolicyError.message);
    } else {
      console.log('‚úÖ Pol√≠tica de leitura p√∫blica configurada');
    }

    // Pol√≠tica para permitir que usu√°rios atualizem suas pr√≥prias fotos
    const { error: updatePolicyError } = await supabase.storage.from('avatars').createPolicy('allow_own_update', {
      name: 'allow_own_update',
      definition: {
        role: 'authenticated',
        operation: 'UPDATE'
      }
    });

    if (updatePolicyError && !updatePolicyError.message.includes('already exists')) {
      console.error('‚ùå Erro ao criar pol√≠tica de atualiza√ß√£o:', updatePolicyError.message);
    } else {
      console.log('‚úÖ Pol√≠tica de atualiza√ß√£o configurada');
    }

    // Pol√≠tica para permitir que usu√°rios deletem suas pr√≥prias fotos
    const { error: deletePolicyError } = await supabase.storage.from('avatars').createPolicy('allow_own_delete', {
      name: 'allow_own_delete',
      definition: {
        role: 'authenticated',
        operation: 'DELETE'
      }
    });

    if (deletePolicyError && !deletePolicyError.message.includes('already exists')) {
      console.error('‚ùå Erro ao criar pol√≠tica de exclus√£o:', deletePolicyError.message);
    } else {
      console.log('‚úÖ Pol√≠tica de exclus√£o configurada');
    }

    console.log('üéâ Configura√ß√£o do Supabase conclu√≠da com sucesso!');
    console.log('üìù Pr√≥ximos passos:');
    console.log('1. Teste o upload de fotos na p√°gina de perfil');
    console.log('2. Verifique se as imagens est√£o sendo exibidas corretamente');
    console.log('3. Teste a remo√ß√£o de fotos');

  } catch (error) {
    console.error('‚ùå Erro durante a configura√ß√£o:', error.message);
  }
}

setupSupabase(); 